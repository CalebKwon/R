#########################################################
###########################dplyr########################
#########################################################
# https://rpubs.com/justmarkham/dplyr-tutorial
install.packages("dplyr")
library(dplyr)
install.packages("hflights")
library(hflights)
install.packages("magrittr")
library(magrittr)

data(hflights)
head(hflights)
flights <- tbl_df(hflights)
flights<-hflights
str(flights)
head(flights)

# base R approach to view all flights on January 1
flights[flights$Month== 11 & flights$DayofMonth==4, ]
filter(flights, UniqueCarrier=="AA" | UniqueCarrier=="UA")
filter(flights, UniqueCarrier %in% c("AA", "UA"))


# base R approach to select DepTime, ArrTime, and FlightNum columns
flights[, c("DepTime", "ArrTime", "FlightNum")]

# dplyr approach
select(flights, DepTime, ArrTime, FlightNum)

# use colon to select multiple contiguous columns, and use `contains` to match columns by name
# note: `starts_with`, `ends_with`, and `matches` (for regular expressions) can also be used to match columns by name
select(flights, Year:DayofMonth, contains("Taxi"), contains("Delay"))

# nesting method to select UniqueCarrier and DepDelay columns and filter for delays over 60 minutes
filter(select(flights, UniqueCarrier, DepDelay), DepDelay > 60)

# base R approach to select UniqueCarrier and DepDelay columns and sort by DepDelay
head(flights[order(flights$DepDelay), c("UniqueCarrier", "DepDelay")])
head(flights[order(-flights$DepDelay), c("UniqueCarrier", "DepDelay")])
# sort, order, arrange 
# http://stackoverflow.com/questions/14817620/how-to-sort-a-data-frame-by-alphabetic-order-of-a-character-variable-in-r

# 
# %>%== >then
a<-flights %>%
  select(UniqueCarrier, DepDelay) %>%
  arrange(-DepDelay)
head(a)
# base R approach to create a new variable Speed (in mph)
flights$Speed <- flights$Distance / flights$AirTime*60
flights[, c("Distance", "AirTime", "Speed")]

# dplyr approach (prints the new variable but does not store it)
flights %>%
  select(Distance, AirTime) %>%
  mutate(Speed = Distance/AirTime*60)

# base R approaches to calculate the average arrival delay to each destination
# head(with(flights, tapply(ArrDelay, Dest, mean, na.rm=TRUE)))
# head(aggregate(ArrDelay ~ Dest, flights, mean))

##x <- c(1,2,NA,3)
## mean(x) # returns NA
## mean(x, na.rm=TRUE) # returns 2


# dplyr approach: create a table grouped by Dest, and then summarise each group by taking the mean of ArrDelay
flights %>%
  group_by(UniqueCarrier) %>%
  summarise(avg_delay = mean(ArrDelay, na.rm=TRUE))


names(flights)

# for each carrier, calculate the percentage of flights cancelled or diverted
flights %>%
  group_by(UniqueCarrier) %>%
  summarise_each(funs(mean), Cancelled, Diverted)



# for each carrier, calculate the minimum and maximum arrival and departure delays
flights %>%
  group_by(UniqueCarrier) %>%
  summarise_each(funs(min(., na.rm=TRUE), max(., na.rm=TRUE)), matches("Delay"))



# for each day of the year, count the total number of flights and sort in descending order

# rewrite more simply with the `tally` function
flights %>%
  group_by(Month, DayofMonth) %>%
  tally(sort = TRUE)

# for each destination, show the number of cancelled and not cancelled flights
flights %>%
  group_by(Dest) %>%
  select(Cancelled) %>%
  table() %>%
  head()

# for each carrier, calculate which two days of the year they had their longest departure delays
# note: smallest (not largest) value is ranked as 1, so you have to use `desc` to rank by largest value
flights %>%
  group_by(UniqueCarrier) %>%
  select(Month, UniqueCarrier, DayofMonth, DepDelay) %>%
  filter(min_rank(desc(DepDelay)) <= 2) %>%
  arrange(UniqueCarrier, desc(DepDelay))
