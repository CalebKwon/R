#################################################
##################### 참고 서적####################
#################################################

# http://rstudio-pubs-static.s3.amazonaws.com/24275_7554c7b09c5c4a7fb85801316a6955cc.html
# http://www.ats.ucla.edu/stat/r/gbe/histogram.htm
# http://www.ats.ucla.edu/stat/r/gbe/boxplot.htm
# http://www.ats.ucla.edu/stat/r/gbe/scatter.htm
# http://www.ats.ucla.edu/stat/r/gbe/ggplot_boxplot.htm
# https://plot.ly/r/line-and-scatter/
# http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/r/iris_plots/
# Scatter plot, ggplot2
# http://www.sthda.com/english/wiki/ggplot2-scatter-plots-quick-start-guide-r-software-and-data-visualization
# histogram, ggplot2
# http://www.r-bloggers.com/how-to-make-a-histogram-with-ggplot2/
# http://www.cookbook-r.com/Graphs/Plotting_distributions_(ggplot2)/
# http://www.sthda.com/english/wiki/ggplot2-histogram-plot-quick-start-guide-r-software-and-data-visualization
# http://www.sthda.com/english/wiki/ggplot2-histogram-easy-histogram-graph-with-ggplot2-r-package
# http://datamining.dongguk.ac.kr/R/R%EC%9D%98%EC%84%A4%EC%B9%98%EB%B0%8F%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95.pdf
# https://www.youtube.com/watch?v=rqrrTfy-z-c

### public dataset
### what to do : https://www.data.go.kr/#/L21haW4=
### what to do : http://data.seoul.go.kr/

# 스타벅스 매장 전략
# http://www.dongabiz.com/Business/Marketing/content.php?atno=1202054701&chap_no=1&sdkey=14424653996&user=dep#TOP


# R 기초
# 데이터 불러오기
getwd()
setwd("~/Dropbox/~~~~~~~~")

data<-read.csv(file.choose())

data<-read.csv("~/Dropbox/Statlecture/lecture/RintroYonsei/data.csv",header =TRUE)


# 간단한 산술 연산
1+1

10^3 + 36

(3+4+5)/3

# 
a+x

# 값 할당
a<-1
x<-3

# 
a+x

# 
x

# 
a

# 
a * 5


# 리스트
ki<-c(170,171,172,173,174,175,176)

# 리스트에서 다섯번째 값 추출
ki[5]

# 리스트에 함수 적욕
sum(ki)/5
# 합
mean()
# 편차
sd

x = c(1,2,3,4,5)
y = c(-1,-2,-3,-4,-5)

x+y

x * y


####################################################
################ Q. 아래 각각의 코드의 답은? #############
####################################################

x = c(1,3,5,7,9)
y = c(2,3,5,7,11,13) 

#	1.	 x+1
#	2.	 y*2
#	3.	length(x) and length(y)
#	4.	 x + y
#	5.	sum(x>5) 
# 6. sum(x[x>5])
#	7.	sum(x<7 & x> 3) # read | as 'or', & and 'and'
#	8.	y[3]
#	9.	y[-3]
#	10. y[c(1,3,5,10)] (What is NA?)
#	11.	y[y>=7]

# dataframe
# Data Manipulation
data(iris)
iris

dim(iris)

colnames(iris)
rownames(iris)
names(iris)
head(iris)

# rbind
iris1<-iris[1:75,]
iris2<-iris[76:150,]
r<-rbind(iris1,iris2)

# cbind
iris1<-iris[,1:3]
iris2<-iris[,4:5]
c<-cbind()

# merge : vist below website!!!!
# http://rfriend.tistory.com/51
## 데이터 프레임 생성
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep("Alabama", 2), rep("Ohio", 1)))

# inner join: 
merge(df1, df2)

# Outer join: 
merge(x = df1, y = df2, by = "CustomerId", all.x = TRUE)

# iris data 정렬하기
newdata<-iris[order(iris$@@@),]
# newdata<-iris[order(-iris$@@@),]


# csv 파일로 저장하기
write.csv(mydata,"") 

# Merge한 데이터 csv로 저장하기
# iris1  save as csv
# iris2  save as csv
# iris data 정렬한거 csv로 저장하기

######## more advanced data manipulation########
library(MASS)
data(UScereal)
head(UScereal)
UScereal
dim(UScereal)
names(UScereal)
attach(UScereal)

# 데이터의 구조 보여주기
str(UScereal)

# 데이터 요약
summary(UScereal)

##########################################
###################변수 설명################
##########################################
# mfr=manufacturer
# calories= number of calories in one protion
# protein=grams of protein in one portion
# fat=frams of fat in one portion
# sodium=miligrams of sodium in one portion
# fibre=grams of dietary fibre in one portion
# carbo=grams of complex carbohydrates in one portion
# sugars=grams of sugars in one portion
# shelf=display shelf(1,2, or 3, counting )
# potassium=grams of potassium
# vitamins=vitamins and minerals(none, enriched, or 100%)

names(UScereal)
# 관심있는 변수 6개를 택해보자. 자신을 식품 관련 연구원(국민에게 건강한 식품을 제안해야 하는)
# ex : 1) 6개의 변수 오름/ 내림으로 정렬해보자. 2) 각각의 정리된 데이터셋을 지정한 폴더에 저장해보기



UScerealCPrS<-UScereal[,c(2,3,5,8)]

plot(UScerealCPrS)
head(UScerealCPrS)

UScerealonetofour<-UScereal["Wheaties",1:4]
head(UScerealonetofour)

UScerealonetoten<-UScereal[1:20,]

UScerealmfrG<-UScereal[UScereal$mfr=="G",]
UScerealmfrG.1<-UScereal[UScereal$mfr=="G",c(1,3,7)]
UScerealmfrGKP<-UScereal[UScereal$mfr%in%c("G","K","P"),]

UScerealGHsugar<-UScereal[with(UScereal, mfr=="G"& sugars>mean(sugars)),]
UScereal[with(UScereal, mfr=="P"& calories>mean(calories)),]
Gsodi<-UScereal[with(UScereal, mfr=="G"& sodium>mean(sodium)),]

subset(UScereal,sugars<10)
sugars.10<-subset(UScereal,sugars>10)
HsugarsLcalories<-subset(UScereal,sugars>10&calories<120)
HsugarsLcalories.1<-subset(UScereal,sugars>10&calories<120,select=c(sugars,calories))
HsugarsLcalories.2<-subset(UScereal,sugars>10&calories<120,select=mfr:protein)


# http://www.statmethods.net/graphs/bar.html
# 범주형 데이터로 변환 시키기 그리고 bar plot그리기

colnames(UScereal)
UScereal$sugars1[UScereal$sugars>=mean(UScereal$sugars)]="high"
UScereal$sugars1[UScereal$sugars<mean(UScereal$sugars)]="low"


# 실습-범주별로 데이터를 나누어 다른 이름으로 저장하기

counts<-UScereal$sugars1

# table 함수 연습
table(counts)

#############다이어트와 관련된 영양소를 찾아보자###############
#### 1) calories
#### 2) protein
#### 3) sugars
#### 4) fibre

# 1) calories
mean(calories)
min(calories)
max(calories)
summary(calories)
hist(calories)$counts

hist(calories,breaks=30, main="Calories",col="red")
# http://stackoverflow.com/questions/9317948/how-to-label-histogram-bars-with-data-values-or-percents-in-r
help(hist)

# 2)

# 3)

# 4)

########## 여러개의 그래프를 한 페이지에#############
par(mfrow=c(1,3))
hist(calories,breaks=30,, main="Calories",col="red")
hist(fat,breaks=30, main="Fat",col="red")
hist(sugars,breaks=30, main="Sugars",col="red")


############ sugars, fat, and calories를 전체 평균보다 중간 이하 포함한 제품을 찾아라.
# Condition
sugL<-subset(UScereal,sugars<mean(sugars))
sugLcalL<-subset(sugL,sugL$calories<mean(sugL$calories))
sugLcalLfatL<-subset(sugLcalL,sugLcalL$fat<mean(sugLcalL$fat))

############# Sugars, fat, and calories 모두가 전체 평균보다 중간보다 큰 제품을 찾아라.
sugH<-subset(UScereal,sugars>mean(sugars))
sugHcalH<-subset(sugH,sugH$calories>mean(sugH$calories))
sugHcalHfatH<-subset(sugHcalH,sugHcalH$fat>mean(sugHcalH$fat))

# 비교
summary(sugLcalLfatL)
summary(sugHcalHfatH)


# 비교
summary(sugLcalLfatL)
summary(sugHcalHfatH)


plot(calories,fat)
text(calories,fat,labels=row.names(UScereal),pos=4, cex=0.6, col="blue")

plot(calories,sugars)
text(calories,sugars,labels=row.names(UScereal),pos=4, cex=0.6, col="red")

plot(sugars,fat)
text(sugars,fat,labels=row.names(UScereal),pos=4, cex=0.6, col="black")

# Brand Name 
plot(calories,fat,main="Nutrition",xlab="Calories", ylab="Fat")
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")

plot(calories,sugars,main="Nutrition",xlab="Calories", ylab="Sugars")
text(calories,sugars,labels=mfr,pos=4, cex=0.6, col="red")

plot(sugars,fat,main="Nutrition",xlab="Sugars", ylab="Fat")
text(sugars,fat,labels=mfr,pos=4, cex=0.6, col="red")

par(mfrow=c(1,3))
plot(calories,fat,main="Nutrition",xlab="Calories", ylab="Fat")
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")
plot(calories,sugars,main="Nutrition",xlab="Calories", ylab="Sugars")
text(calories,sugars,labels=mfr,pos=4, cex=0.6, col="red")
plot(sugars,fat,main="Nutrition",xlab="Sugars", ylab="Fat")
text(sugars,fat,labels=mfr,pos=4, cex=0.6, col="red")

# 제조사
plot(calories,fat, pch=21,main="Nutrition",xlab="Calories", ylab="fat",bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")

plot(calories,sugars, pch=21, main="Nutrition",xlab="Calories", ylab="sugars",bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])
text(calories,sugars,labels=mfr,pos=4, cex=0.6, col="red")

plot(sugars,fat, pch=21, main="Nutrition",xlab="sugars", ylab="fat",bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])
text(sugars,fat,labels=mfr,pos=4, cex=0.6, col="red")

# ploting with different shape
plot(calories,fat,pch=c(21,22,23,24,25,26)[unclass(mfr)],main="Nutrition",xlab="Calories", ylab="fat",bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")
c(21,22,23,24,25,26)[unclass(mfr)]  

# arrange three graphs in one page
par(mfrow=c(1,2))  
plot(calories,fat,main="Nutrition",xlab="Calories", ylab="Fat")
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")
plot(calories,fat,main="Nutrition",xlab="Calories", ylab="Fat", pch=21, bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])

par(mfrow=c(1,2))  
plot(calories,sugars,main="Nutrition",xlab="Calories", ylab="Sugars")
text(calories,sugars,labels=mfr,pos=4, cex=0.6, col="red")
plot(calories,sugars,main="Nutrition",xlab="Calories", ylab="Sugars", pch=21, bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])

par(mfrow=c(1,2))  
plot(sugars,fat,main="Nutrition",xlab="Sugars", ylab="Fat")
text(sugars,fat,labels=mfr,pos=4, cex=0.6, col="red")
plot(sugars,fat,main="Nutrition",xlab="Sugars", ylab="Fat", pch=21, bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])


# R- Basic Graph
barplot(counts, main="sugars Distribution", xlab="Amount of Suagrs")

# bar plot 심화
# practice more with different data
data("mtcars")

# Simple Bar Plot 
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", xlab="Number of Gears")
    
# Simple Horizontal Bar Plot with Added Labels 
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", horiz=TRUE, names.arg=c("3 Gears", "4 Gears", "5 Gears"))    

# Stacked Bar Plot with Colors and Legend
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",xlab="Number of Gears", col=c("darkblue","red"), legend = rownames(counts))
  
# Grouped Bar Plot
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",
  xlab="Number of Gears", col=c("darkblue","red"),
 	legend = rownames(counts), beside=TRUE)


# Simple Histogram, bar plot과의 차이점은?
hist(mtcars$mpg)

# Colored Histogram with Different Number of Bins
hist(mtcars$mpg, breaks=12, col="red")

# Kernel Density Plot
d <- density(mtcars$mpg) # returns the density data 
plot(d) # plots the results

# Add a Normal Curve (Thanks to Peter Dalgaard)
x <- mtcars$mpg 
h<-hist(x, breaks=10, col="red", xlab="Miles Per Gallon", 
  	main="Histogram with Normal Curve") 
xfit<-seq(min(x),max(x),length=40) 
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x)) 
yfit <- yfit*diff(h$mids[1:2])*length(x) 
lines(xfit, yfit, col="blue", lwd=2)


# scatterplot
# 교육 데이터를 이용한 그룹별 군집화
hsb2 <- read.table('http://www.ats.ucla.edu/stat/r/modules/hsb2.csv', header=T, sep=",")

hsb2$race

attach(hsb2)
race

# 산점도
plot(read, write)
cor(read, write)

# practice more!

# line
plot(math, write)
abline(lsfit(write, math))

#alternatively
plot(math, write)
fit<-lm(write ~ math)
abline(fit)


# pch for plotting characters, or symbol to use
# see help(points) for more information on pch

hsb2

hsb2_female<-hsb2[female==1,]
hsb2_male<-hsb2[female==0,]
with(hsb2_female, plot(math, write, pch=20, col="darkred"))
with(hsb2_male, points(math, write, pch=20, col="darkblue"))

# alternatively 
math_male<-hsb2$math[female==0]
write_male<-hsb2$write[female==0]
math_female<-hsb2$math[female==1]
write_female<-hsb2$write[female==1]

plot(math_female, write_female, type="p", 
     pch=20, col="darkred")
points(math_male, write_male, pch=22, col="darkblue")

# race 별로 점을 찍어 봅시다.
# race == 1
# race == 2
# race == 3
# race == 4 
hsb2_r1<-hsb2[race==1,]
hsb2_r2<-hsb2[race==2,]
hsb2_r3<-hsb2[race==3,]
hsb2_r4<-hsb2[race==4,]
with(hsb2_r1, plot(math, write, pch=20, col="darkred"))
with(hsb2_r2, points(math, write, pch=20, col="darkblue"))
with(hsb2_r3, points(math, write, pch=20, col="green"))
with(hsb2_r4, points(math, write, pch=20, col="pink"))

# ses 별로 색깔을 달리하여 점을 찍어 봅시다.

# adding legend 
hsb2_female<-hsb2[female==1,]
hsb2_male<-hsb2[female==0,]
with(hsb2_female, plot(math, write, pch=20, 
                       col="darkred", ylim=c(25, 70)))
with(hsb2_male, points(math, write, pch=22, 
                       col="darkblue"))
legend(65, 35, c("female", "male"), pch=c(20, 22), 
       cex=.8, col=c("darkred", "darkblue"))


# male vs female
math_male<-hsb2$math[female==0]
write_male<-hsb2$write[female==0]
math_female<-hsb2$math[female==1]
write_female<-hsb2$write[female==1]
plot(math_female, write_female, type="p", pch=20,col="darkred", ylim=c(25, 70))
points(math_male, write_male, pch=22, col="darkblue")
abline(lsfit(write_female, math_female), col="darkred")
abline(lsfit(write_male, math_male), col="darkblue")
legend(65, 35, c("female", "male"), pch=c(20, 22), 
       cex=.8, col=c("darkred", "darkblue"))


# add title and axis name
# plot(faithful,
#       main = "", # 제목
#       xlab = "", # x축 이름
#       ylab = "") # y축 이름


# race의 math와 write의 산점도, 추세선, 레전드 그려보기
hsb2_r1<-hsb2[race==1,]
hsb2_r2<-hsb2[race==2,]
hsb2_r3<-hsb2[race==3,]
hsb2_r4<-hsb2[race==4,]
with(hsb2_r1, plot(math, write, pch=20, col="darkred"))
with(hsb2_r2, points(math, write, pch=20, col="darkblue"))
with(hsb2_r3, points(math, write, pch=20, col="green"))
with(hsb2_r4, points(math, write, pch=20, col="pink"))


# 성적별로 범주형 데이터로 나누기  

# Histogram
# 정규 분포의 성질 이해하기
# 정규 분포 공부!
# 정규 분포를 따를때 예측 가능한 것들
u <- rnorm(1000)
#default histogram
hist(u)

#with shading
hist(u, density=20)

#with specific number of bins
hist(u, density=20, breaks=20)

# proportion, instead of frequency
# also specifying y-axis
hist(u, density=20, breaks=-3:3, 
     ylim=c(0,.5), prob=TRUE)

hist(u, density=20, prob=TRUE)

# density plot


# overlay normal curve with x-lab and ylim
# colored normal curve
m<-mean(u)
std<-sqrt(var(u))
hist(u, density=20, breaks=20, prob=TRUE, 
     xlab="x-variable", ylim=c(0, 0.7), 
     main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std), 
      col="darkblue", lwd=2, add=TRUE)

hist(u, density=20, breaks=20, prob=TRUE, 
     xlab="x-variable", ylim=c(0, 0.8),
     main="Density curve over histogram") 
lines(density(u), col = "blue")

# hist(u) is an object
# names(uh) will show all of its components
uh<-hist(u)
plot(uh, ylim=c(0, 40), col="lightgray", 
     xlab="", main="Histogram of u")
text(uh$mids, uh$counts+2, label=c(uh$counts))


# probability 예측해봅시다

1-pnorm(330,m=280,sd=40)

# 누적분포함수 값 p에 해당하는 분위수 q 를 알고 싶을 때
qnorm(p=0.8413447, mean=0, sd=1)

# Data Manipulation
# Play with data set
install.packages("car")
library(car)
data(mtcars)
newdata<-mtcars[,c(1,3,4,5,6)]
plot(newdata)
cor(newdata)
class(mtcars$vs)
dim(mtcars)
head(mtcars)
attributes(mtcars)
names(mtcars)
rownames(mtcars)

mtcars$gear
attach(mtcars)
gear
mtcars["Fiat 128",]

# am 오토메틱, 메뉴얼
mtcars$am<-as.factor(mtcars$am)
mtcars$vs<-as.factor(mtcars$vs)
summary(mtcars)

# 조건을 둔 추출
mtcars[which.max(mtcars$mpg),]
mtcars[which.min(mtcars$wt),]

# 데이터 정리
aggregate(mpg~gear, data=mtcars, FUN="mean")
aggregate(mpg~gear, data=mtcars, FUN="sd")



# help(aggregate)
# http://www.uni-kiel.de/psychologie/rexrepos/posts/aggregate.html

# 산점도 Plot
plot(mtcars)
attach(mtcars)

plot(hp~mpg)
plot(cyl~mpg)

# pie chart
table(mtcars$am)
auto=mtcars$am
matic=table(auto)
pie(matic)
auto=mtcars$gear
matic=table(auto)
pie(matic)


# Calories, Sugars, Fat 서로 상관 관계가 있는듯 보인다. 좀 더 정확히 확인해봅시다. 

# Correlation Graph
pairs(~calories+fat+sugars,data=UScereal, main="Simple Scatterplot Matrix")
plot(~calories+fat+sugars,data=UScereal, main="Simple Scatterplot Matrix")

help(pairs)
help(plot)
library(car)
scatterplot.matrix(~calories+fat+sugars|mfr, data=UScereal,main="Scatterplot")

mtcars[grep("Merc", rownames(mtcars)), ]

# sort by mpg and cyl
newdata <- mtcars[order(mpg, cyl),]

#sort by mpg (ascending) and cyl (descending)
newdata <- mtcars[order(mpg, -cyl),] 



# 3D Scatterplot

install.packages("plotly")
library(plotly)
packageVersion('plotly')

mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)

p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
  add_markers() %>%
  layout(scene = list(xaxis = list(title = 'Weight'),
                      yaxis = list(title = 'Gross horsepower'),
                      zaxis = list(title = '1/4 mile time')))

# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter3d/basic")
chart_link


# 3D Scatter Plot with Color Scaling
p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, 
             marker = list(color = ~mpg, colorscale = c('#FFE1A1', '#683531'), showscale = TRUE)) %>%
  add_markers() %>%
  layout(scene = list(xaxis = list(title = 'Weight'),
                      yaxis = list(title = 'Gross horsepower'),
                      zaxis = list(title = '1/4 mile time')),
         annotations = list(
           x = 1.13,
           y = 1.05,
           text = 'Miles/(US) gallon',
           xref = 'paper',
           yref = 'paper',
           showarrow = FALSE
         ))

# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter3d/colorscale")
chart_link



# 3D Bubble Plot
library(plotly)

data <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv")

data_2007 <- data[which(data$year == 2007),]
data_2007 <- data_2007[order(data_2007$continent, data_2007$country),]
data_2007$size <- data_2007$pop
colors <- c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070', '#C61951')

p <- plot_ly(data_2007, x = ~gdpPercap, y = ~lifeExp, z = ~pop, color = ~continent, size = ~size, colors = colors, 
             marker = list(symbol = 'circle', sizemode = 'diameter'), sizes = c(5, 150),
             text = ~paste('Country:', country, '<br>Life Expectancy:', lifeExp, '<br>GDP:', gdpPercap,
                           '<br>Pop.:', pop)) %>%
  layout(title = 'Life Expectancy v. Per Capita GDP, 2007',
         scene = list(xaxis = list(title = 'GDP per capita (2000 dollars)',
                                   gridcolor = 'rgb(255, 255, 255)',
                                   range = c(2.003297660701705, 5.191505530708712),
                                   type = 'log',
                                   zerolinewidth = 1,
                                   ticklen = 5,
                                   gridwidth = 2),
                      yaxis = list(title = 'Life Expectancy (years)',
                                   gridcolor = 'rgb(255, 255, 255)',
                                   range = c(36.12621671352166, 91.72921793264332),
                                   zerolinewidth = 1,
                                   ticklen = 5,
                                   gridwith = 2),
                      zaxis = list(title = 'Population',
                                   gridcolor = 'rgb(255, 255, 255)',
                                   type = 'log',
                                   zerolinewidth = 1,
                                   ticklen = 5,
                                   gridwith = 2)),
         paper_bgcolor = 'rgb(243, 243, 243)',
         plot_bgcolor = 'rgb(243, 243, 243)')

# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter3d/bubble")
chart_link


