#################################################
##################### 참고 서적####################
#################################################

# http://rstudio-pubs-static.s3.amazonaws.com/24275_7554c7b09c5c4a7fb85801316a6955cc.html
# http://www.ats.ucla.edu/stat/r/gbe/histogram.htm
# http://www.ats.ucla.edu/stat/r/gbe/boxplot.htm
# http://www.ats.ucla.edu/stat/r/gbe/scatter.htm
# http://www.ats.ucla.edu/stat/r/gbe/ggplot_boxplot.htm
# https://plot.ly/r/line-and-scatter/
# http://www2.warwick.ac.uk/fac/sci/moac/people/students/peter_cock/r/iris_plots/
# Scatter plot, ggplot2
# http://www.sthda.com/english/wiki/ggplot2-scatter-plots-quick-start-guide-r-software-and-data-visualization
# histogram, ggplot2
# http://www.r-bloggers.com/how-to-make-a-histogram-with-ggplot2/
# http://www.cookbook-r.com/Graphs/Plotting_distributions_(ggplot2)/
# http://www.sthda.com/english/wiki/ggplot2-histogram-plot-quick-start-guide-r-software-and-data-visualization
# http://www.sthda.com/english/wiki/ggplot2-histogram-easy-histogram-graph-with-ggplot2-r-package
# http://datamining.dongguk.ac.kr/R/R%EC%9D%98%EC%84%A4%EC%B9%98%EB%B0%8F%EA%B8%B0%EB%B3%B8%EC%82%AC%EC%9A%A9%EB%B2%95.pdf
# https://www.youtube.com/watch?v=rqrrTfy-z-c

### public dataset
### what to do : https://www.data.go.kr/#/L21haW4=
### what to do : http://data.seoul.go.kr/

# 스타벅스 매장 전략
# http://www.dongabiz.com/Business/Marketing/content.php?atno=1202054701&chap_no=1&sdkey=14424653996&user=dep#TOP


# 간단한 산술 연산
1+1

10^3 + 36

(3+4+5)/3

# 
a+x

a<-1
x<-3

a+x

x

a

a * 5


# Manipulation of Data
ki<-c(170,171,172,173,174,175,176)

# 5th number
ki[5]

# sum
sum(ki)


# list
x = c(1,2,3,4,5)
y = c(-1,-2,-3,-4,-5)

x+y

x * y

y <- rep(1:5, 3)



####################################################
################ Q. 아래 각각의 코드의 답은? #############
####################################################

x = c(1,3,5,7,9)
y = c(2,3,5,7,11,13) 

#	1.	 x+1
#	2.	 y*2
#	3.	length(x) and length(y)
#	4.	 x + y
#	5.	sum(x>5) 
# 6. sum(x[x>5])
#	7.	sum(x<7 & x> 3) # read | as 'or', & and 'and'
#	8.	y[3]
#	9.	y[-3]
#	10. y[c(2,3,10)] (What is NA?)
#	11.	y[y>=7]

y<-c(1,2,3,4,5,6,7,8,9,10)
x<-c(10,20,30,40,50,60,70,80,90)
x[y]
x[-3]

# 데이터 불러오기
getwd()
setwd("yourpath")

# data 불러오기
# load medical data
data<-read.csv(file.choose())
data<-read.csv("filename",header =TRUE)
data<-read.csv("yourpath",header =TRUE)

# 데이터의 구조 보여주기
str(data) 
dim(data)
# 데이터 요약
summary(data)

# rbind & cbind
#
data1<-data[1:75,]
data2<-data[76:150,]
r<-rbind(data1,data2)

#
data1<-data[,1:3]
data2<-data[,4:5]
c<-cbind(data1,data2)

# iris1 : save as csv
# iris2 : save as csv

# csv 파일로 저장하기
write.csv(mydata,"")

# merge
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep("Alabama", 2), rep("Ohio", 1)))

# merge two data frames by ID
total <- merge(data frameA,data frameB,by="CustomerId")

# merge two data frames by ID and Country
total <- merge(data frameA,data frameB,by=c("CustomerId"))


# iris data 정렬하기
newdata<-data[order(data$@@@),]
# newdata<-data[order(-data$@@@),]

# sort by %%% and &&&
newdata <- data[order(data$%%%, data$&&&),]

#sort by %%% (ascending) and &&& (descending)
newdata <- data[order(data$%%%, -data$&&&),] 



# ex : 정렬한 데이터를 반으로 나누어 csv file로 저장하기
# write.csv(mydata,"")


######## more advanced data manipulation########
library(MASS)
data(UScereal)
head(UScereal)
UScereal
dim(UScereal)
names(UScereal)
str(UScereal)
summary(UScereal)
# attach(UScereal)
# detach(UScereal)

##########################################
###################변수 설명################
##########################################
# mfr=manufacturer
# calories= number of calories in one protion
# protein=grams of protein in one portion
# fat=frams of fat in one portion
# sodium=miligrams of sodium in one portion
# fibre=grams of dietary fibre in one portion
# carbo=grams of complex carbohydrates in one portion
# sugars=grams of sugars in one portion
# shelf=display shelf(1,2, or 3, counting )
# potassium=grams of potassium
# vitamins=vitamins and minerals(none, enriched, or 100%)

UScerealCPrS<-UScereal[,c(2,3,5,8)]
plot(UScerealCPrS)
cor(UScereal)

# box plot and scatter plot together
# http://www.win-vector.com/blog/2015/06/wanted-a-perfect-scatterplot-with-marginals/

UScerealonetofour<-UScereal["Wheaties",1:4]
UScerealmfrG<-UScereal[UScereal$mfr=="G",]
UScerealmfrG.1<-UScereal[UScereal$mfr=="G",c(1,3,7)]
UScerealmfrGKP<-UScereal[UScereal$mfr%in%c("G","K","P"),]

UScerealGHsugar<-UScereal[with(UScereal, mfr=="G"& sugars>mean(sugars)),]
UScereal[with(UScereal, mfr=="P"& calories>mean(calories)),]
Gsodi<-UScereal[with(UScereal, mfr=="G"& sodium>mean(sodium)),]

sugars.10<-subset(UScereal,sugars>10)
HsugarsLcalories<-subset(UScereal,sugars>10&calories<120)
HsugarsLcalories.1<-subset(UScereal,sugars>10&calories<120,select=c(sugars,calories))
HsugarsLcalories.2<-subset(UScereal,sugars>10&calories<120,select=mfr:protein)

# 실습-범주별로 데이터를 나누어 다른 이름으로 저장하기
# http://www.statmethods.net/graphs/bar.html
# 범주형 데이터로 변환 시키기 그리고 bar plot그리기
UScereal$sugars1[UScereal$sugars>=mean(UScereal$sugars)]="high"
UScereal$sugars1[UScereal$sugars<mean(UScereal$sugars)]="low"
UScereal$sugars1
counts<-UScereal$sugars1

barplot(table(counts), main="sugars Distribution", xlab="Amount of Suagrs")
boxplot(sugars~sugars1,data=UScereal, main="",xlab="", ylab="")


# advanced barplot and boxplot
# Simple Horizontal Bar Plot with Added Labels 
counts <- table(mtcars$gear)
barplot(counts, main="Car Distribution", horiz=TRUE,
  names.arg=c("3 Gears", "4 Gears", "5 Gears"))    

# Stacked Bar Plot with Colors and Legend
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",
  xlab="Number of Gears", col=c("darkblue","red"),
 	legend = rownames(counts))
  
# Grouped Bar Plot
counts <- table(mtcars$vs, mtcars$gear)
barplot(counts, main="Car Distribution by Gears and VS",
  xlab="Number of Gears", col=c("darkblue","red"),
 	legend = rownames(counts), beside=TRUE)
#install.packsges(ggplot2)
#library(ggplot2) 
#data(diamonds)
#diamonds$price1[diamonds$price<500]="low"
#diamonds$price1[diamonds$price>=500&diamonds$price<2000]="middle"
#diamonds$price1[diamonds$price>=2000&diamonds$price<5000]="high"
#diamonds$price1[diamonds$price>=5000]="very high"
# table(diamonds$price1)
# boxplot(carat~price1, outline=FALSE, data=diamonds)

# 이름 순서대로 바꾸려면 한 가지 명령어가 더 들어가야 합니다. 
diamonds$price1=factor(diamonds$price1, levels=c("low","middle","high","very high"))
boxplot(carat~price1, outline=FALSE, data=diamonds)
 
 
# ex : 4개의 연속 변수를 명목 변수로 바꾸고 1)테이블로 정리, 2)bar plot/box plot 으로 시각화
# medicaldata 적용해보기
# BMI
# age
# others(choose variables)

#############다이어트와 관련된 영양소를 찾아보자###############
#### 1) calories
#### 2) protein
#### 3) sugars
#### 4) fibre

# 1) calories
mean(calories)
min(calories)
max(calories)
summary(calories)

# 2) protein
# 3) sugars
# 4) fibre

# histogram
hist(calories)
hist(calories)$counts
hist(calories,breaks=30, main="Calories",col="red")
# http://stackoverflow.com/questions/9317948/how-to-label-histogram-bars-with-data-values-or-percents-in-r


########## 여러개의 그래프를 한 페이지에#############
par(mfrow=c(1,3))
hist(calories,breaks=30,, main="Calories",col="red")
hist(fat,breaks=30, main="Fat",col="red")
hist(sugars,breaks=30, main="Sugars",col="red")

############ sugars, fat, and calories를 전체 평균보다 중간 이하 포함한 제품을 찾아라.
# Condition
sugL<-subset(UScereal,sugars<mean(sugars))
sugLcalL<-subset(sugL,sugL$calories<mean(sugL$calories))
sugLcalLfatL<-subset(sugLcalL,sugLcalL$fat<mean(sugLcalL$fat))

############# Sugars, fat, and calories 모두가 전체 평균보다 중간보다 큰 제품을 찾아라.
sugH<-subset(UScereal,sugars>mean(sugars))
sugHcalH<-subset(sugH,sugH$calories>mean(sugH$calories))
sugHcalHfatH<-subset(sugHcalH,sugHcalH$fat>mean(sugHcalH$fat))

# 비교
summary(sugLcalLfatL)
summary(sugHcalHfatH)

# 비교
summary(sugLcalLfatL)
summary(sugHcalHfatH)

# 
plot(calories,fat)
text(calories,fat,labels=row.names(UScereal),pos=4, cex=0.6, col="blue")

plot(calories,sugars)
text(calories,sugars,labels=row.names(UScereal),pos=4, cex=0.6, col="red")

plot(sugars,fat)
text(sugars,fat,labels=row.names(UScereal),pos=4, cex=0.6, col="black")

# Brand Name 
plot(calories,fat,main="Nutrition",xlab="Calories", ylab="Fat")
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")

plot(calories,sugars,main="Nutrition",xlab="Calories", ylab="Sugars")
text(calories,sugars,labels=mfr,pos=4, cex=0.6, col="red")

plot(sugars,fat,main="Nutrition",xlab="Sugars", ylab="Fat")
text(sugars,fat,labels=mfr,pos=4, cex=0.6, col="red")

par(mfrow=c(1,3))
plot(calories,fat,main="Nutrition",xlab="Calories", ylab="Fat")
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")
plot(calories,sugars,main="Nutrition",xlab="Calories", ylab="Sugars")
text(calories,sugars,labels=mfr,pos=4, cex=0.6, col="red")
plot(sugars,fat,main="Nutrition",xlab="Sugars", ylab="Fat")
text(sugars,fat,labels=mfr,pos=4, cex=0.6, col="red")

# 제조사
plot(calories,fat, pch=21,main="Nutrition",xlab="Calories", ylab="fat",bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")

plot(calories,sugars, pch=21, main="Nutrition",xlab="Calories", ylab="sugars",bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])
text(calories,sugars,labels=mfr,pos=4, cex=0.6, col="red")

plot(sugars,fat, pch=21, main="Nutrition",xlab="sugars", ylab="fat",bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])
text(sugars,fat,labels=mfr,pos=4, cex=0.6, col="red")

# ploting with different shape
plot(calories,fat,pch=c(21,22,23,24,25,26)[unclass(mfr)],main="Nutrition",xlab="Calories", ylab="fat",bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")
c(21,22,23,24,25,26)[unclass(mfr)]  

# arrange three graphs in one page
par(mfrow=c(1,2))  
plot(calories,fat,main="Nutrition",xlab="Calories", ylab="Fat")
text(calories,fat,labels=mfr,pos=4, cex=0.6, col="red")
plot(calories,fat,main="Nutrition",xlab="Calories", ylab="Fat", pch=21, bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])

par(mfrow=c(1,2))  
plot(calories,sugars,main="Nutrition",xlab="Calories", ylab="Sugars")
text(calories,sugars,labels=mfr,pos=4, cex=0.6, col="red")
plot(calories,sugars,main="Nutrition",xlab="Calories", ylab="Sugars", pch=21, bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])

par(mfrow=c(1,2))  
plot(sugars,fat,main="Nutrition",xlab="Sugars", ylab="Fat")
text(sugars,fat,labels=mfr,pos=4, cex=0.6, col="red")
plot(sugars,fat,main="Nutrition",xlab="Sugars", ylab="Fat", pch=21, bg=c("red","yellow","green","blue","black","pink")[unclass(mfr)])

# Calories, Sugars, Fat 서로 상관 관계가 있는듯 보인다. 좀 더 정확히 확인해봅시다. 

# Correlation Graph
pairs(~calories+fat+sugars,data=UScereal, main="Simple Scatterplot Matrix")
plot(~calories+fat+sugars,data=UScereal, main="Simple Scatterplot Matrix")


# R 결측값 확인 및 처리: is.na(), sum(is.na()), na.rm=TRUE, na.omit(), complete.cases()

x <- c(1, 2, 3, 4, NA, 6, 7, 8, 9, NA)
is.na(x)
sum(is.na(x))

sum(x)

mean(x)

sum(x, na.rm = TRUE)

mean(x, na.rm = TRUE)


library(MASS)
is.na(Cars93)
str(Cars93)

# Cars93 데이터 프레임에 결측값 갯수 총 합계 구하기
sum(is.na(Cars93))

# Cars93 의 각 변수별로 결측값 개수 구하기 (27개 중에서 4개만 예시로 함)
sum(is.na(Cars93$Manufacturer)) 
sum(is.na(Cars93$Price))
sum(is.na(Cars93$Rear.seat.room))
sum(is.na(Cars93$Luggage.room))
colSums(is.na(Cars93))

sum(Cars93$Luggage.room)

mean(Cars93$Luggage.room)

sum(Cars93$Luggage.room, na.rm = TRUE)

mean(Cars93$Luggage.room, na.rm = TRUE)

Cars93_1 <- na.omit(Cars93)
str(Cars93_1)
str(Cars93)

# 데이터프레임의 모든 행의 결측값을 특정 값(가령, '0')으로 일괄 대체 
# dataset[is.na(dataset)] <- 0



# Practice - 데이터 분석 로직(산점도, 군집 나누기, 그룹별 트랜드)
hsb2 <- read.table('https://stats.idre.ucla.edu/wp-content/uploads/2016/02/hsb2-2.csv', header=T, sep=",")
dim()
summary()
head()
attach()

# 산점도
plot(read, write)
cor(read, write)

# line
plot(math, write)
abline(lsfit(write, math))

#alternatively
plot(math, write)
fit<-lm(write ~ math)
abline(fit)

# pch for plotting characters, or symbol to use
# see help(points) for more information on pch

hsb2_female<-hsb2[female==1,]
hsb2_male<-hsb2[female==0,]
with(hsb2_female, plot(math, write, pch=20, col="darkred"))
with(hsb2_male, points(math, write, pch=20, col="darkblue"))

# alternatively 
math_male<-hsb2$math[female==0]
write_male<-hsb2$write[female==0]
math_female<-hsb2$math[female==1]
write_female<-hsb2$write[female==1]

plot(math_female, write_female, type="p", 
     pch=20, col="darkred")
points(math_male, write_male, pch=22, col="darkblue")



# race 별로 점을 찍어 봅시다.
# race == 1
# race == 2
# race == 3
# race == 4 
hsb2_r1<-hsb2[race==1,]
hsb2_r2<-hsb2[race==2,]
hsb2_r3<-hsb2[race==3,]
hsb2_r4<-hsb2[race==4,]
with(hsb2_r1, plot(math, write, pch=20, col="darkred"))
with(hsb2_r2, points(math, write, pch=20, col="darkblue"))
with(hsb2_r3, points(math, write, pch=20, col="green"))
with(hsb2_r4, points(math, write, pch=20, col="pink"))


# ses 별로 색깔을 달리하여 점을 찍어 봅시다.





# adding legend 
hsb2_female<-hsb2[female==1,]
hsb2_male<-hsb2[female==0,]
with(hsb2_female, plot(math, write, pch=20, 
                       col="darkred", ylim=c(25, 70)))
with(hsb2_male, points(math, write, pch=22, 
                       col="darkblue"))
legend(65, 35, c("female", "male"), pch=c(20, 22), 
       cex=.8, col=c("darkred", "darkblue"))


# adding abline
hsb2_female<-hsb2[female==1,]
hsb2_male<-hsb2[female==0,]
with(hsb2_female, plot(math, write, pch=20, 
                       col="darkred", ylim=c(25, 70)))
with(hsb2_male, points(math, write, pch=22, 
                       col="darkblue"))
with(hsb2_female,abline(lsfit(write, math), col="darkred"))
with(hsb2_male,abline(lsfit(write, math), col="darkblue"))
legend(65, 35, c("female", "male"), pch=c(20, 22), 
       cex=.8, col=c("darkred", "darkblue"))



# race의 math와 write의 산점도, 추세선, 레전드 그려보기
hsb2_r1<-hsb2[race==1,]
hsb2_r2<-hsb2[race==2,]
hsb2_r3<-hsb2[race==3,]
hsb2_r4<-hsb2[race==4,]
with(hsb2_r1, plot(math, write, pch=20, col="darkred"))
with(hsb2_r2, points(math, write, pch=20, col="darkblue"))
with(hsb2_r3, points(math, write, pch=20, col="green"))
with(hsb2_r4, points(math, write, pch=20, col="pink"))


# 성적별로 범주형 데이터로 나누기  


# Histogram
# 정규 분포의 성질 이해하기
# 정규 분포를 따를때 예측 가능한 것들
u <- rnorm(1000)
#default histogram
hist(u)

#with shading
hist(u, density=20)

#with specific number of bins
hist(u, density=20, breaks=20)

# proportion, instead of frequency
# also specifying y-axis
hist(u, density=20, breaks=-3:3, 
     ylim=c(0,.5), prob=TRUE)

hist(u, density=20, prob=TRUE)

# density plot


# overlay normal curve with x-lab and ylim
# colored normal curve
m<-mean(u)
std<-sqrt(var(u))
hist(u, density=20, breaks=20, prob=TRUE, 
     xlab="x-variable", ylim=c(0, 0.7), 
     main="normal curve over histogram")
curve(dnorm(x, mean=m, sd=std), 
      col="darkblue", lwd=2, add=TRUE)

hist(u, density=20, breaks=20, prob=TRUE, 
     xlab="x-variable", ylim=c(0, 0.8),
     main="Density curve over histogram") 
lines(density(u), col = "blue")

# hist(u) is an object
# names(uh) will show all of its components
uh<-hist(u)
plot(uh, ylim=c(0, 40), col="lightgray", 
     xlab="", main="Histogram of u")
text(uh$mids, uh$counts+2, label=c(uh$counts))


# probability 예측해봅시다
# study normal distribution & Central Limit Theorem

# calculate probability
1-pnorm(330,m=280,sd=40)

# 누적분포함수 값 p에 해당하는 분위수 q 를 알고 싶을 때
qnorm(p=0.8413447, mean=0, sd=1)


# 3D Scatterplot

install.packages("plotly")
library(plotly)
packageVersion('plotly')

mtcars$am[which(mtcars$am == 0)] <- 'Automatic'
mtcars$am[which(mtcars$am == 1)] <- 'Manual'
mtcars$am <- as.factor(mtcars$am)

p <- plot_ly(mtcars, x = ~wt, y = ~hp, z = ~qsec, color = ~am, colors = c('#BF382A', '#0C4B8E')) %>%
  add_markers() %>%
  layout(scene = list(xaxis = list(title = 'Weight'),
                      yaxis = list(title = 'Gross horsepower'),
                      zaxis = list(title = '1/4 mile time')))

# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = plotly_POST(p, filename="scatter3d/basic")
chart_link


###### 잘나가는 패키지 찾기
####### http://awesome42.com/

###
library(car)
data(mtcars)


mpg
max(mpg)

min(mpg)
mean(mpg)
summary(mpg)

table(cyl)
barplot(table(cyl))

stem(mpg)

boxplot(mpg)

mpg[cyl==4]
mean(mpg[cyl==4])

mpg[cyl==6]
mean(mpg[cyl==6])


# X <- c(rep(65, times=5), rep(25, times=5), rep(35, times=10), rep(45, times=4))
# hist(X, prob=TRUE, col="grey")# prob=TRUE for probabilities not counts
# lines(density(X), col="blue", lwd=2) # add a density estimate with defaults
# lines(density(X, adjust=2), lty="dotted", col="darkgreen", lwd=2)



hist(mpg)
hist(mpg,breaks=20)
hist(mpg,breaks=10,col="blue")
hist(mpg,breaks=10,col="red",xlab="Miles Per Gallon")
hist(mpg,breaks=10,col="red",xlab="Miles Per Gallon",main="Histogram Of MPG")


# density curve
d <- density(mpg) # returns the density data 
plot(d)
plot(d,xlab="Miles Per Gallon",main="Density Of MPG")
#polygon(d, col="red", border="blue")
polygon(d, col="blue", border="red")

# Next Step
# dplyr
# ggplot






