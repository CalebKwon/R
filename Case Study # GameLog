# merge
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Toaster", 3), rep("Radio", 3)))
df2 = data.frame(CustomerId = c(2, 4, 6), State = c(rep("Alabama", 2), rep("Ohio", 1)))
merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
# Outer join: merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
# Left outer: merge(x = df1, y = df2, by = "CustomerId", all.x = TRUE)
# Right outer: merge(x = df1, y = df2, by = "CustomerId", all.y = TRUE)
# Cross join: merge(x = df1, y = df2, by = NULL)


###################################################
##################Business Data Analysis###########
###################################################
getwd()

# 배너 광고

# CSV 파일을 읽어들이기

# 하루에 한 번 이상 게임을 이용한 유저
# 날짜별로 이용한 유저 ID가 모두 들어있다.
# ex) 2013년 6월 1일에 퍼즐 컬랙션 유저 ID가 116인 사람이 이용했다. 
dau <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/section3-dau.csv", header = T, stringsAsFactors = F)
head(dau)
dim(dau)

# 하루에 1원 이상 지불한 유저.
# 같은날에 여러번 로그인해서 게임한 경우에는 그때마다의 과금액 데이터가 남는다.
# ex) 2013년 6월 1일에 유저 ID가 351인 사람이 13330원을 지불했음
dpu <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/section3-dpu.csv", header = T, stringsAsFactors = F)
head(dpu)

# ID별로 게임을 시작한 날짜를 기록한 데이터
# 유저 ID가 1인 유저는 2013년 4월 15일부터 퍼즐 컬랙션을 이용하기 시작했음
install <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/section3-install.csv", header = T, stringsAsFactors= F)
head(install)

####################데이터 결합하기#######################

# DAU 데이터에 Install 데이터를 결합시키기

# 게임한 사람중에 돈을 지불한 사람의 비율이 적다.
dim(dau)
dim(dpu)
dim(install)

dpu[1:30,]
# 2
# merge two data frames by "user_id" and "app_name"
dau.install <- merge(dau, install, by = c("user_id", "app_name"))

head(dau.install)
dim(dau.install)

# 위 데이터에 다시 DPU 데이터를 결합시키기
dau.install.payment <- merge(dau.install, dpu, by = c("log_date","app_name", "user_id"), all.x = T)
# merge를 쓰기 위한 조건 -> at least one common variable
# logical; if TRUE, then extra rows will be added to the output, one for each row in x that has no matching row in y.(행이 생성된다.) 
# These rows will have NAs in those columns that are usually filled with values from y. 
# The default is FALSE, so that only rows withdata from both x and y are included in the output.

head(dau.install.payment)
dim(dau.install.payment)
dim(install)

head(na.omit(dau.install.payment))

# 비과금 유저의 과금액에 0을 넣기
dau.install.payment$payment[is.na(dau.install.payment$payment)] <- 0
head(dau.install.payment)

# 월차로 집계하기

# 월 항목 추가
substr("abcdefghijklmn", 1, 7)

head(dau.install.payment$log_month)
dau.install.payment$log_month <-substr(dau.install.payment$log_date, 1, 7)
head(dau.install.payment$log_month)
head(dau.install.payment$log_month)
dau.install.payment$install_month <- substr(dau.install.payment$install_date, 1, 7)
head(dau.install.payment$install_month)
head(dau.install.payment)

# 과금한 고객만 추리기
payonly<-dau.install.payment
payonly<-payonly[!(payonly$payment==0),]
head(payonly)

install.packages("plyr")
library("plyr")

mau.payment <- ddply(dau.install.payment,
.(log_month, user_id, install_month), # 그룹화
summarize, # 집계 명령
payment = sum(payment) # payment 합계
)
mau.payment$payment


# 신규 유저인지 기존 유저인지 구분하는 항목을 추가

# 신규 유저와 기존 유저 식별
mau.payment$user.type <- ifelse(mau.payment$install_month == mau.payment$log_month,
"install", "existing")
mau.payment.summary <- ddply(mau.payment,
.(log_month, user.type), # 그룹화
summarize, # 집계 명령어
total.payment = sum(payment) # payment 합계, 새로 만들어질 항목
)
head(mau.payment) 
mau.payment.summary


# 그패프로 데이터를 시각화하기 (geom_bar()　->　geom_bar(stat="identity")로 수정 2014/08/22）
library("ggplot2")
library("scales")
ggplot(mau.payment.summary, aes(x = log_month, y = total.payment,
fill = user.type)) + geom_bar(stat="identity") + scale_y_continuous(label = comma)

# old_theme = theme_update(
# axis.title.x = theme_text(family="HiraKakuProN-W3"),
# axis.title.y = theme_text(family="HiraKakuProN-W3", angle=90),
# plot.title = theme_text(family="HiraKakuProN-W3", size=14.4))

ggplot(mau.payment[mau.payment$payment > 0 & mau.payment$user.type == "install", ], 
aes(x = payment, fill = log_month)) + geom_histogram(position = "dodge", binwidth = 20000)

#4 
# CSV 파일을 읽어들이기
dau <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/section4-dau.csv", header = T, stringsAsFactors = F)
head(dau)
user.info <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/section4-user_info.csv", header = T, stringsAsFactors = F)
head(user.info)

# DAU에 user.info를 결합시키기
dau.user.info <- merge(dau, user.info, by = c("user_id", "app_name"))
head(dau.user.info)

# 월 항목을 추가
dau.user.info$log_month <- substr(dau.user.info$log_date, 1, 7)
head(dau.user.info)

# 세그먼트 분석（성별로 집계）
table(dau.user.info[, c("log_month", "gender")])

# 세그먼트 분석(연령대별로 집계）
table(dau.user.info[, c("log_month", "generation")])

# 세그먼트 분석（성별과 연령대를 조합해 집계）
library(reshape2)
dcast(dau.user.info, log_month ~ gender + generation, value.var = "user_id", length)
# appropriate graph?


# 세그먼트 분석（단말기별로 집계）
table(dau.user.info[,c("log_month","device_type")])

# 세그먼트 분석 결과를 시각화하기

# 날짜별로 단말기별 유저수를 산출하기
dau.user.info.device.summary <- ddply(dau.user.info, .(log_date, device_type), summarize, dau = length(user_id))
head(dau.user.info.device.summary)
# 날짜별 데이터 형식으로 변환하기
dau.user.info.device.summary$log_date <- as.Date(dau.user.info.device.summary$log_date)

# 시계열의 트렌드 그래프 그리기
library(ggplot2)
library(scales)
limits <- c(0, max(dau.user.info.device.summary$dau))
ggplot(dau.user.info.device.summary, aes(x=log_date, y=dau, col=device_type, lty=device_type, shape=device_type)) +
geom_line(lwd=1) +
geom_point(size=4) +
scale_y_continuous(label=comma, limits=limits)

# 배너 광고
# ab.test.imp 데이터에 ab.test.goal 데이터를 결합시키기
# 데이터를 읽어들이기
ab.test.imp <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/section5-ab_test_imp.csv",header=T, stringsAsFactors=F)
ab.test.goal <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/section5-ab_test_goal.csv",header=T, stringsAsFactors=F)

head(ab.test.imp)
head(ab.test.goal)

# ab.test.imp에 ab.test.goal를 결합시키기
ab.test.imp <- merge(ab.test.imp, ab.test.goal, by="transaction_id", all.x=T, suffixes=c("",".g"))
head(ab.test.imp)

# 
# 클릭 플래그를 추가
ab.test.imp$is.goal <- ifelse(is.na(ab.test.imp$user_id.g),0,1)
head(ab.test.imp)

# 
# 클릭율을 계산하기
library(plyr)
ddply(ab.test.imp, .(test_case), summarize,
cvr=sum(is.goal)/length(user_id))

# χ2 검정을 실행하기
chisq.test(ab.test.imp$test_case, ab.test.imp$is.goal)

# 
# 날짜별, 테스트 케이스별로 클릭율을 산출하기
ab.test.imp.summary <-
ddply(ab.test.imp, .(log_date, test_case), summarize,
imp=length(user_id),
cv=sum(is.goal),
cvr=sum(is.goal)/length(user_id))
# 테스트 케이스별로 클릭율을 산출하기
ab.test.imp.summary <-
ddply(ab.test.imp.summary, .(test_case), transform,
cvr.avg=sum(cv)/sum(imp))
head(ab.test.imp.summary)

# 테스트 케이스별 클릭율의 시계열추이 그래프
library(ggplot2)
library(scales)
ab.test.imp.summary$log_date <- as.Date(ab.test.imp.summary$log_date)
limits <- c(0, max(ab.test.imp.summary$cvr))
ggplot(ab.test.imp.summary,aes(x=log_date,y=cvr, col=test_case,lty=test_case, shape=test_case)) +
geom_line(lwd=1) +
geom_point(size=4) +
geom_line(aes(y=cvr.avg,col=test_case)) +
scale_y_continuous(label=percent, limits=limits)


# 
##  6장 소스코드

# CSV 파일 읽어들이기
ad.data <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/ad_result.csv", header = T, stringsAsFactors = F)
ad.data

# TV 광고의 광고비용과 신규 유저수의 산점도를 그리기
library(ggplot2)
library(scales)

ggplot(ad.data, aes(x = tvcm, y = install)) + geom_point() + 
xlab("TV 광고비") + ylab("신규 유저수") + 
scale_x_continuous(label = comma) +
scale_y_continuous(label = comma)

# 잡지매체의 광고비용과 신규 유저수의 산점도를 그리기
ggplot(ad.data, aes(x = magazine, y = install)) + geom_point() + 
xlab("잡지 광고비") + ylab("신규 유저수") + 
scale_x_continuous(label = comma) + 
scale_y_continuous(label = comma)

# 회귀분석 실행
fit <- lm(install ~ ., data = ad.data[, c("install", "tvcm", "magazine")])
fit

# 회귀분석 결과를 해석하기
summary(fit)

##

##  7장 소스코드

# CSV 파일 읽어들이기
dau <- read.csv("~/Dropbox/Statlecture/40H/DataAnalysis_src/R/section7-dau.csv", header = T, stringsAsFactors = F)
head(dau)

# 유저별로 ID이전을 한 유저인지 아닌지를 나타내는 데이터를 정리
# MAU
mau <- unique (dau[, c("region_month", "device", "user_id")])
# FP MAU
fp.mau <- unique (dau[dau$device=="FP", c("region_month", "device",
"user_id")])
# SP MAU
sp.mau <- unique (dau[dau$device=="SP", c("region_month", "device",
"user_id")])

# 1월과 2월 데이터를 나누기
fp.mau1 <- fp.mau[fp.mau$region_month == "2013-01", ]
fp.mau2 <- fp.mau[fp.mau$region_month == "2013-02", ]
sp.mau1 <- sp.mau[sp.mau$region_month == "2013-01", ]
sp.mau2 <- sp.mau[sp.mau$region_month == "2013-02", ]
# 1월에 피쳐폰으로 이용했던 유저가 2월에도 이용했는가
mau$is_access <- 1
fp.mau1 <- merge(fp.mau1, mau[mau$region_month == "2013-02",
c("user_id", "is_access")], by = "user_id", all.x = T)
fp.mau1$is_access[is.na(fp.mau1$is_access)] <- 0
head(fp.mau1)

# 1월에 피쳐폰으로 이용했고 2월에도 피쳐폰으로 이용했는가
fp.mau2$is_fp <- 1
fp.mau1 <- merge(fp.mau1, fp.mau2[, c("user_id", "is_fp")],
by = "user_id",
all.x = T)
fp.mau1$is_fp[is.na(fp.mau1$is_fp)] <- 0
head(fp.mau1)

# 1월에는 피쳐폰으로 이용하다가 2월에는 스마트폰으로 이용했는가
sp.mau2$is_sp <- 1
fp.mau1 <- merge(fp.mau1, sp.mau2[, c("user_id", "is_sp")],
by = "user_id", all.x = T)
fp.mau1$is_sp[is.na(fp.mau1$is_sp)] <- 0
head(fp.mau1)

# 1월에는 피쳐폰으로 이용했는데 2월에는 이용하지 않았거나 혹은 스마트폰으로 이용한 유저
fp.mau1 <- fp.mau1[fp.mau1$is_access == 0 | fp.mau1$is_sp == 1, ]
head(fp.mau1)

# 날짜별 게임 이용상황 데이터를 정리하기
library(reshape2)
fp.dau1 <- dau[dau$device == "FP" & dau$region_month == "2013-01", ]
fp.dau1$is_access <- 1
fp.dau1.cast <- dcast(fp.dau1, user_id ~ region_day, value.var =
"is_access", function(x) as.character(length(x)))
names(fp.dau1.cast)[-1] <- paste0("X", 1:31, "day")
head(fp.dau1.cast)

# 2월에 스마트폰으로 이용한 유저 데이터를 결합하기
fp.dau1.cast <- merge(fp.dau1.cast, fp.mau1[, c("user_id", "is_sp")],
by = "user_id")
head(fp.dau1.cast)

table(fp.dau1.cast$is_sp)

# 로지스틱 회귀분석을 통한 모델 작성
fit.logit <- step(glm(is_sp ~ ., data = fp.dau1.cast[, -1],
family = binomial))
summary(fit.logit)

# 작성된 모델을 이용해 예측하기
# SP(스마트폰) 이전 확률
fp.dau1.cast$prob <- round(fitted(fit.logit), 2)
# SP(스마트폰)으로 이전할 지 예측
fp.dau1.cast$pred <- ifelse(fp.dau1.cast$prob > 0.5, 1, 0)
head(fp.dau1.cast)

# 예측과 실제
table(fp.dau1.cast[, c("is_sp", "pred")])

# 예측결과로부터 유저군을 추측하기
fp.dau1.cast1 <- fp.dau1.cast[fp.dau1.cast$is_sp == 1 & fp.dau1.cast$pred
== 1, ]
head(fp.dau1.cast1[order(fp.dau1.cast1$prob, decreasing = T), ])

fp.dau1.cast2 <- fp.dau1.cast[fp.dau1.cast$is_sp == 0 & fp.dau1.cast$pred
== 1, ]
head(fp.dau1.cast2[order(fp.dau1.cast2$prob, decreasing = T), ])

fp.dau1.cast3 <- fp.dau1.cast[fp.dau1.cast$is_sp == 0 & fp.dau1.cast$pred
== 0, ]
head(fp.dau1.cast3[order(fp.dau1.cast3$prob), ])

